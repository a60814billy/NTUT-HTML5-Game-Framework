<!DOCTYPE html>
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta charset="utf-8">
    <title>Snake</title>
   
    <script type="text/javascript" src="../core.js"></script>
    <script type="text/javascript" src="../Game.js"></script>
    <script type="text/javascript" src="../Util.js"></script>
    <script type="text/javascript" src="../DebugInfo.js"></script>
    <script type="text/javascript" src="../FpsAnalysis.js"></script>
    <script type="text/javascript" src="../Sprite.js"></script>
    <script type="text/javascript" src="../KeyBoardManager.js"></script>
    <script type="text/javascript" src="../ResourceManager.js"></script>

    <script type="text/javascript">        
        window.onload = function () {
            var $ = Framework;
            $.DebugInfo.showDebugInfo(true);

            var mineGame = $.inheritance($.Game, {
                initialize: function () {
                    $.DebugInfo.showDebugInfo(true);
                    $.DebugInfo.show();

                    this.drawSnake = new $.Sprite("snake_files/body.png");                   
                    this.drawFood = new $.Sprite("snake_files/food.jpg");
                  
                    this.size = 48;
                    //this.setCanvas(document.getElementById("viewport"));
                    this.snakeArray = new Array(this.size);
                    for (var i = 0; i < this.size; i++) {
                        this.snakeArray[i] = new Array(this.size);
                        for (var j = 0; j < this.size; j++) {
                            this.snakeArray[i][j] = 0;
                        }
                    }
                    this.speed = 10;
                    this.speedCounter = 0;
                    this.dir = 6;
                    this.eaten = false;
                    this.snakeBody = new Array;
                    this.snakeBody.push({ x: 1, y: 1 });
                    this.snakeBody.push({ x: 2, y: 1 });
                    this.snakeBody.push({ x: 3, y: 1 });
                    this.snakeArray[1][1] = 1;
                    this.snakeArray[2][1] = 1;
                    this.snakeArray[3][1] = 1;
                    this.createFood();
                },
                update: function () {
                    var length = this.snakeBody.length - 1;
                    var oldX, oldY;
                    if (this.speedCounter === this.speed) {
                        switch (this.dir) {
                            case 6:
                                if (this.snakeBody[length].x === this.size - 1) {
                                    oldY = this.snakeBody[length].y;
                                    this.snakeBody.push({ x: 0, y: oldY });
                                    if (this.snakeArray[0][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[0][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[0][oldY] = 1;
                                }
                                else {
                                    oldX = this.snakeBody[length].x + 1;
                                    oldY = this.snakeBody[length].y;
                                    this.snakeBody.push({ x: oldX, y: oldY });
                                    if (this.snakeArray[oldX][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][oldY] = 1;
                                }
                                break;
                            case 2:
                                if (this.snakeBody[length].y === this.size - 1) {
                                    oldX = this.snakeBody[length].x;
                                    this.snakeBody.push({ x: oldX, y: 0 });
                                    if (this.snakeArray[oldX][0] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][0] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][0] = 1;
                                }
                                else {
                                    oldX = this.snakeBody[length].x;
                                    oldY = this.snakeBody[length].y + 1;
                                    this.snakeBody.push({ x: oldX, y: oldY });
                                    if (this.snakeArray[oldX][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][oldY] = 1;
                                }
                                break;
                            case 4:
                                if (this.snakeBody[length].x === 0) {
                                    oldY = this.snakeBody[length].y;
                                    this.snakeBody.push({ x: this.size - 1, y: oldY });
                                    if (this.snakeArray[this.size - 1][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[this.size - 1][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[this.size - 1][oldY] = 1;
                                }
                                else {
                                    oldX = this.snakeBody[length].x - 1;
                                    oldY = this.snakeBody[length].y;
                                    this.snakeBody.push({ x: oldX, y: oldY });
                                    if (this.snakeArray[oldX][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][oldY] = 1;
                                }
                                break;
                            case 8:
                                if (this.snakeBody[length].y === 0) {
                                    oldX = this.snakeBody[length].x;
                                    this.snakeBody.push({ x: oldX, y: this.size - 1 });
                                    if (this.snakeArray[oldX][this.size - 1] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][this.size - 1] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][this.size - 1] = 1;
                                }
                                else {
                                    oldX = this.snakeBody[length].x;
                                    oldY = this.snakeBody[length].y - 1;
                                    this.snakeBody.push({ x: oldX, y: oldY });
                                    if (this.snakeArray[oldX][oldY] === 2) {
                                        this.eaten = true;
                                    }
                                    else if (this.snakeArray[oldX][oldY] === 1) {
                                        this.stop();
                                        alert("Boom!!");
                                    }
                                    this.snakeArray[oldX][oldY] = 1;
                                }
                                break;
                        }
                        if (this.eaten === false) {
                            oldX = this.snakeBody[0].x;
                            oldY = this.snakeBody[0].y;
                            this.snakeArray[oldX][oldY] = 0;
                            this.snakeBody.shift();
                        }
                        else {
                            this.eaten = false;
                            this.createFood();
                        }
                        this.speedCounter = 0;
                    }
                    else {
                        this.speedCounter++;
                    }
                },
                draw: function (ctx) {

                    for (var i = 0; i < this.size; i++) {
                        for (var j = 0; j < this.size; j++) {
                            if (this.snakeArray[i][j] === 1) {
                                this.drawSnake.position.x = i * 10;
                                this.drawSnake.position.y = j * 10;
                                this.drawSnake.draw(ctx);
                            }
                            if (this.snakeArray[i][j] === 2) {
                                this.drawFood.position.x = i * 10;
                                this.drawFood.position.y = j * 10;
                                this.drawFood.draw(ctx);
                            }
                        }
                    }
                },
                click: function (e) {
                },
                keydown: function (key, list, e) {
                    if (list.Right && (this.dir === 8 || this.dir === 2)) {
                        this.dir = 6;
                    }
                    if (list.Up && (this.dir === 6 || this.dir === 4)) {
                        this.dir = 8;
                    }
                    if (list.Left && (this.dir === 8 || this.dir === 2)) {
                        this.dir = 4;
                    }
                    if (list.Down && (this.dir === 6 || this.dir === 4)) {
                        this.dir = 2;
                    }
                },
                createFood: function () {
                    var rx = Math.floor(Math.random() * this.size);
                    var ry = Math.floor(Math.random() * this.size);
                    while (this.snakeArray[rx][ry] === 1) {
                        rx = Math.floor(Math.random() * this.size);
                        ry = 1;
                    }
                    this.snakeArray[rx][ry] = 2;
                },
                touchstart: function (e) {
                    this.isTouch = true;
                    this.touchPoint = { x: e.touches[0].clientX, y: e.touches[0].clientY };
                },
                touchend: function (e) {
                },
                touchmove: function (e) {
                    if (this.isTouch) {
                        if (this.dir === 2 || this.dir === 8) {
                            if (Math.abs(event.touches[0].clientX - this.touchPoint.x) > Math.abs(event.touches[0].clientY - this.touchPoint.y)) {
                                if (event.touches[0].clientX - this.touchPoint.x > 0) {
                                    this.dir = 6;
                                }
                                else {
                                    this.dir = 4;
                                }
                            }
                        }
                        else {
                            if (Math.abs(event.touches[0].clientX - this.touchPoint.x) < Math.abs(event.touches[0].clientY - this.touchPoint.y)) {
                                if (event.touches[0].clientY - this.touchPoint.y < 0) {
                                    this.dir = 8;
                                }
                                else {
                                    this.dir = 2;
                                }
                            }
                        }
                        this.isTouch = false;
                    }
                }

            });
            mineGame.start();
        }
</script>
    <style type="text/css">
        *
        {
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
 <!--   <canvas id="viewport" width="480" height="480" style="border: 1px solid #000;" oncontextmenu="return false;"></canvas>-->

    <div style="width: 500px; height: 200px; background-color: rgb(240, 240, 240); position: absolute; top: 10px; border: 1px solid rgb(0, 0, 0); right: 10px; z-index: 99999; overflow-y: scroll;"></div>


<div style="width: 500px; height: 200px; background-color: rgb(240, 240, 240); position: absolute; top: 10px; border: 1px solid rgb(0, 0, 0); right: 10px; z-index: 99999; overflow-y: scroll;"></div></body></html>